{"meta":{"title":"petertan303","subtitle":"welcome？","description":"","author":"peter？","url":"http://Petertan303.github.io","root":"/"},"pages":[{"title":"about","date":"2023-01-16T14:00:14.000Z","updated":"2023-04-19T12:40:55.802Z","comments":false,"path":"about/index.html","permalink":"http://petertan303.github.io/about/index.html","excerpt":"","text":"你好，世界。 你好，陌生人。 我是一名大二电子信息工程在读大学生，对软件硬件都略有涉猎，正在摸索未来的方向。你可以称我为petertan303，也可以称呼我为皮蛋。你可以通过+86 19951796274联系我。"}],"posts":[{"title":"爬虫 plus","slug":"Python-爬虫-plus","date":"2023-05-18T02:34:08.000Z","updated":"2023-05-18T03:14:22.592Z","comments":true,"path":"2023/05/18/Python-爬虫-plus/","link":"","permalink":"http://petertan303.github.io/2023/05/18/Python-%E7%88%AC%E8%99%AB-plus/","excerpt":"","text":"3123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869# 导入所需模块import requestsfrom bs4 import BeautifulSoupfrom os import _exit,path,remove,systemfrom time import ctime# import jsoncookie = &#x27;this is cookies&#x27; cookies = &#123;i.split(&quot;=&quot;)[0]:i.split(&quot;=&quot;)[-1] for i in cookie.split(&quot;; &quot;)&#125;headers = &#123;&#x27;User-Agent&#x27;:&#x27;this is User-Agent&#x27;&#125;site_url=open(&#x27;site.txt&#x27;,&#x27;r+&#x27;,encoding=&#x27;utf-8&#x27;) # 可读可写url_read=site_url.read()url_dict=eval(url_read) # 转化为字典# site=set(url_dict) # 这样会输出集合，不方便遍历site=list(url_dict.keys()) # 需要从dict_key强转为listdef add_site(): print(url_dict) url_dict[input(&#x27;输入站点代号：&#x27;)]=input(&#x27;请输入站点url：&#x27;) print(url_dict) site_url.seek(0) site_url.write(str(url_dict))while 1: # system(&#x27;cls&#x27;) print(&#x27;-1.add new site&#x27;) print(&#x27;0.quit&#x27;) for i in range(len(url_dict)): print(str(i+1)+&#x27;.&#x27;+site[i]) num=int(input(&#x27;请输入站点编号：&#x27;)) if num==0: site_url.close() _exit(0) if num==-1: add_site() site_url.seek(0) url_read=site_url.read() site=list(url_dict.keys()) # 需要从dict_key强转为list continue page_num=int(input(&#x27;请输入抓取页数：&#x27;)) file_path = &#x27;data&#x27;+&#x27;_&#x27;+site[num-1]+&#x27;.txt&#x27; if path.exists(file_path): remove(file_path) f=open(file_path, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) f.write(&#x27;抓取时间：&#x27;+ctime()+&#x27;\\n&#x27;) f.close() for page in range(page_num): f=open(file_path, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) f.write(&#x27;\\n\\n第&#x27;+str(page+1)+&#x27;页：\\n&#x27;) f.close() url = url_dict[site[num-1]]+str(page+1) print(url) response = requests.get(url, headers=headers,cookies=cookies) soup = BeautifulSoup(response.text, &#x27;lxml&#x27;) for each in soup.find_all(&#x27;tbody&#x27;): title = each.find(&#x27;a&#x27;,class_ = &#x27;topic&#x27;).get_text(strip=True) f=open(file_path, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) f.write(&#x27;\\n&#x27;.join([title])) f.write(&#x27;\\n&#x27;) f.close() print(&#x27;response.status_code ==&#x27;,response.status_code)site_url.close() 改进增加了通过文件读写来更新site即站点列表； 增加了交互式查询的功能； 增加了抓取时间和抓取页面的页数（如果是用于数据分析，那这个属于是多余，但如果爬出来的结果是给人看的，那就显得很有必要了。） 注意点文件的打开方式只介绍我用到的两种，和试图用的一种 ‘r+’：可读可写 ‘a’：追加内容 ‘w+’：打开即清空 前两种的差别在于文件指针初始位置： ‘r+’初始在文件头，read操作将其挪到文件尾，导致第二次read就读不出东西。这种时候就可以通过seek()方法更改文件指针位置，例如seek(0)就是挪到文件开头。 ‘a’初始在文件尾，因此我们需要if path.exists(file_path): remove(file_path)来进行伪覆写。 ‘w+’不是很讲理，将打开的文件视作全新文件，即使没有任何操作也会清空文件内容。 python各种对象和字符串对象的转化其实字符串也是对象，但字符串比较偏朴素，和花里胡哨的dict、list、set什么的完全比不了。 其他对象可以使用str()转化为字符串，字符串也可以通过list()（列表）、eval（字典）等方法转化为其它类型的对象。 其他类型的强制类型转化也是类似，例如字符串可以转化为整型数，’1’可以转化为 1。 对 C 语言起手的人来说堪称魔法。 获取目前时间使用time库的ctime()方法。 连缀&#39;\\n&#39;.join([title])，意思是通过换行符号将join里字符串序列连接起来。 收回前言，python字符串也挺花里胡哨的。 python中的for看上去和 C 里的 for(i=0;i&lt;n;i++);很像，但这里的意思是选取系列中的元素，对所有元素进行以下操作。 如果把系列，也就是soup.find_all(&#39;tbody&#39;)换成range()，那就和 C 类似了。 另外，python的for是可以使用else的。 312for each in soup.find_all(&#x27;tbody&#x27;): title = each.find(&#x27;a&#x27;,class_ = &#x27;topic&#x27;).get_text(strip=True) 果然面向过程到面向对象的思维转化是个艰难的过程。 从右向左执行url_dict[input(&#39;输入站点代号：&#39;)]=input(&#39;请输入站点url：&#39;)，会先让你输入url，再输入站点代号。反正我觉得没差，就没动它了。","categories":[],"tags":[]},{"title":"Python爬虫构建","slug":"Python爬虫构建","date":"2023-05-17T15:47:40.000Z","updated":"2023-05-17T16:11:27.665Z","comments":true,"path":"2023/05/17/Python爬虫构建/","link":"","permalink":"http://petertan303.github.io/2023/05/17/Python%E7%88%AC%E8%99%AB%E6%9E%84%E5%BB%BA/","excerpt":"","text":"3123456789101112131415161718192021# 导入所需模块import requestsfrom bs4 import BeautifulSoupcookie = &#x27;this is cookies&#x27; cookies = &#123;i.split(&quot;=&quot;)[0]:i.split(&quot;=&quot;)[-1] for i in cookie.split(&quot;; &quot;)&#125;headers = &#123;&#x27;User-Agent&#x27;: &#x27;this is user-agent&#x27;,&#125;for page in range(10): url = &#123;&quot;ng2&quot;:&#x27;https://bbs.nga.cn/thread.php?fid=-447601&amp;page=%s&#x27; %page, &quot;ark&quot;:&#x27;https://bbs.nga.cn/thread.php?fid=-34587507&amp;page=%s&#x27; %page&#125; response = requests.get(url[&#x27;ark&#x27;], headers=headers,cookies=cookies) soup = BeautifulSoup(response.text, &#x27;lxml&#x27;) for each in soup.find_all(&#x27;tbody&#x27;): title = each.find(&#x27;a&#x27;,class_ = &#x27;topic&#x27;).get_text(strip=True) f=open(&#x27;data&#x27;+&#x27;_&#x27;+&#x27;ark&#x27;+&#x27;.txt&#x27;, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) f.write(&#x27;\\n&#x27;.join([title])) f.write(&#x27;\\n&#x27;) f.close() print(&#x27;response.status_code ==&#x27;,response.status_code) 关于爬虫本质是一个访问网站，提取某些信息的程序。 “爬取”这个动词描述获取数据的过程。其实比起爬取，爬虫的行为更像是递交一个申请表，申请到一本html文件，然后对着这本html文件写了一篇摘要呈现给用户。 理论上说，人来通过浏览器手动记录数据本质和爬虫一样，但爬虫效率高，容易把服务器爬出问题。 关于我这个爬虫用来爬ngabbs.com的某些版面帖子标题，用于数据分析，绝对不是干什么坏事。 解读首先我是使用了beautifulsoup4和request库。不得不说python的库是真的方便。 312import requestsfrom bs4 import BeautifulSoup 然后我需要清理一下之前生成的残留文件，因此我需要os来获取当前路径下的文件并移除： 312345import ospath = &#x27;data&#x27;+&#x27;_&#x27;+&#x27;ark&#x27;+&#x27;.txt&#x27;if os.path.exists(path): os.remove(path) 然后是构建请求。 请求需要Cookies，否则会报403错误（无权限）； Cookies不能直接提交，需要转换为字典； 请求需要请求头，也就是headers，里面包含User-Agent。一开始我不知道，把Cookies也放在了里面。事实上Cookies应该单独提交； 请求需要url，因为我需要不同版面，不同页数的数据，因此构建了一个字典，使用助记词对应url。令我惊叹的、很人性化的一点是，可以使用%s和追加%page来实现变参的作用； 最后，我们调用了get方法，得到的是response。 然后使用BeautifulSoup对其进行解码，得到soup。 312345678910cookie = &#x27;this is cookies&#x27; cookies = &#123;i.split(&quot;=&quot;)[0]:i.split(&quot;=&quot;)[-1] for i in cookie.split(&quot;; &quot;)&#125;headers = &#123;&#x27;User-Agent&#x27;: &#x27;this is user-agent&#x27;,&#125;for page in range(10): url = &#123;&quot;ng2&quot;:&#x27;https://bbs.nga.cn/thread.php?fid=-447601&amp;page=%s&#x27; %page, &quot;ark&quot;:&#x27;https://bbs.nga.cn/thread.php?fid=-34587507&amp;page=%s&#x27; %page&#125; response = requests.get(url[&#x27;ark&#x27;], headers=headers,cookies=cookies) soup = BeautifulSoup(response.text, &#x27;lxml&#x27;) 然后是写入文件，这部分折磨了我好久。我一开始的版本是： 3123456for each in soup.find_all(&#x27;tbody&#x27;): title = each.find(&#x27;a&#x27;,class_ = &#x27;topic&#x27;).get_text(strip=True) with open(&#x27;data&#x27;+&#x27;_&#x27;+&#x27;ark&#x27;+&#x27;.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as f: f.write(&#x27;\\n&#x27;.join([title])) f.write(&#x27;\\n&#x27;) f.close() 但这样写会让文件的写入覆盖前一个，也就是说，无数轮循环结束，文件里只能保留最后一个标题。 但我不知道为什么，怀疑是with open(&#39;data&#39;+&#39;_&#39;+&#39;ark&#39;+&#39;.txt&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f:的问题。我将其改成了f = open(&#39;data&#39;+&#39;_&#39;+&#39;ark&#39;+&#39;.txt&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;)，但还是同样的问题。 其实我的怀疑是对的，但没怀疑到点子上。 事实上是这个： 31with open(&#x27;data&#x27;+&#x27;_&#x27;+&#x27;ark&#x27;+&#x27;.txt&#x27;, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as f: 注意到区别了吗？ ‘a’ 和 ‘w’。 我应该再多读读文件操作那章的。 31print(&#x27;response.status_code ==&#x27;,response.status_code) 这句不用多说，是打印状态值。一开始疯狂报403、411，终于稳定报200之后，我真的是甚是欣慰。 爬取的成果如下：（碍于篇幅，只展示第一页的）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051[公告] [四周年活动第一弹]分享罗德岛的年度工作报告，赢版面声望！(抽30位幸运坛友赠送周边一份！)[ROLL] 明日方舟四周年庆典签到活动 抽取iPad手办京东卡等周边大奖[剧情讨论] [闲谈交流] 关于“坠落的星星”，我发现一个华点黄铁峡谷18：“弑君者III：狼牙”+“源石环境：活性III”[可能火星]如果下个月是异格阿葬的话，他就是第77个六星[全新开业]龙门茶馆 - 一盅两盏，畅所欲言[提问]新人放入坑，有一堆疑问汐斯塔扭蛋广场[安科/安价]出场文物是各位干员的泰拉博物馆奇妙夜(博士升任司岁台头头)[失智安科]博士发现了一个奇怪的法阵[博all]随机挑选一个男干员当小妈，但是博士想追求自己的小妈[随缘安科][棘流勇境]极境是要成为魔法帝的男人！[ex8突袭]令人绝望的场景[ROLL] 来roll送一块手工小莫流麻！帮助选择困难症萌新回忆一些老cp的发展，非常主观莱塔尼亚大图书馆[同人文] 《边缘》明日方舟x死亡空间[短篇同人](阿米娅向)雷姆必拓的兔子们[渣文笔][同人文]凯尔希之家[葬博] [送葬人氵] 试图坚持三十天每日一葬[提问] 对萌新来说，这次活动商店兑换优先级是什么样的[闲谈交流] 保全派驻的一点正体验(仅限模拟器)[保全氵]太恶心了[破事氵]虽然不是什么特别的数字，但怎么总觉得这龙门币在骂我自己[氵]突然在想，为什么谢拉格二期的中心不能是崖心呢？为啥突袭0—1这么难啊，把我关了陈陈陈陈陈陈是否还有第二异格形态的可能？保全任务是不是有bug和海愿绝配[闲谈交流]各圈各平台最火CP一览，方舟上榜[剧情讨论] 所以老干猫到底有没有自我意识越来越喜欢叔叔了 因为我加班一个月了才发现明日方舟干员列表的背景不是白色而是透明的保全派驻是明日方舟最弱智最失败的模式，没有之一。有没有基建大佬展示一下顶配基建收益3月后入坑的人，没有夜刀玩肉鸽是不是很难受？黄票不足 要换小火龙吗卡西米尔竞技场[突袭cws4](已过审)无限定，6人带阿消，操作简单，大部分时间在挂机[泰拉记事社] #吉姆波顿 # 特里蒙晚间电波秀[孤星]CW-S-1-AB到CW-S-4突袭摆完挂机，不过是小猪！[中坚寻访]中坚甄选：05月18日 04:00 - 06月01日 03:59[剧情氵]霍尔海雅与缪尔赛思人物对比分析[攒抽氵]小刻也能看懂的零氪攒抽记录--《从大哥到缪缪》[微考据][小车氵]Friston？神经科学？是你！——Friston 在现实世界的致敬/原型[考据氵][抛砖引玉氵]谈“孤星”剧情中的科幻Neta(已更新DLC)[活动奖励干员]重装-铁卫 Friston-3[活动奖励服饰] //竞技之梦改装 - 正义骑士号","categories":[],"tags":[]},{"title":"评论再测试","slug":"评论再测试","date":"2023-05-05T10:14:16.000Z","updated":"2023-05-05T12:37:22.143Z","comments":true,"path":"2023/05/05/评论再测试/","link":"","permalink":"http://petertan303.github.io/2023/05/05/%E8%AF%84%E8%AE%BA%E5%86%8D%E6%B5%8B%E8%AF%95/","excerpt":"","text":"测试 18点36分 测试 18点40分 测试 18点55分 测试 18点59分 测试 19点01分 测试 19点13分 测试 20点37分","categories":[],"tags":[]},{"title":"评论测试","slug":"评论测试","date":"2023-05-05T05:55:29.000Z","updated":"2023-05-05T07:43:12.750Z","comments":true,"path":"2023/05/05/评论测试/","link":"","permalink":"http://petertan303.github.io/2023/05/05/%E8%AF%84%E8%AE%BA%E6%B5%8B%E8%AF%95/","excerpt":"","text":"12345678910111213&lt;head&gt; &lt;script src=&#x27;//unpkg.com/valine/dist/Valine.min.js&#x27;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt; &lt;script&gt; new Valine(&#123; el: &#x27;#vcomments&#x27;, appId: &#x27;xxx&#x27;, appKey: &#x27;xxx&#x27; &#125;) &lt;/script&gt;&lt;/body&gt; 以上的html代码放在全文结尾。 还没搞明白 hexo 自带的是怎么搞…… config 配置如下 123456789101112valine: enable: true # 设置为true，默认为false appid: # 将应用key的App ID设置在这里 appkey: # 将应用key的App Key设置在这里 notify: false# 邮箱通知 , https://github.com/xCss/Valine/wiki，默认为false verify: false# 验证码 默认为false placeholder: Just go go ^_^ # 初始化评论显示，根据自己修改，这里默认， avatar: monsterid # 头像风格，默认为mm，可进入网址：https://valine.js.org/visitor.html查看头像设置，这里有许多头像风格，进行设置 guest_info: nick,mail,link # 自定义评论标题 pageSize: 10 # 分页大小，10页就自动分页 visitor: true # 是否允许游客评论 ，进入官网查看设置：https://valine.js.org/visitor.html 值得注意的是，yml文件的冒号后需要空格。 有一说一，leancloud的速度似乎会拖慢页面加载的速度…… new Valine({ el: '#vcomments', appId: 'mV6pM4FkddUR4CfQioaXxMrp-9Nh9j0Va', appKey: 'YvR7UmmLPsWePIigEYzEjLuy' })","categories":[],"tags":[]},{"title":"2023年5月5日","slug":"2023年5月5日","date":"2023-05-04T15:54:15.000Z","updated":"2023-05-05T08:07:44.559Z","comments":true,"path":"2023/05/04/2023年5月5日/","link":"","permalink":"http://petertan303.github.io/2023/05/04/2023%E5%B9%B45%E6%9C%885%E6%97%A5/","excerpt":"","text":"关于阿里云服务器让一个七个月的云服务器烂在手里还是太可惜了。 github上看到一个很有意思的项目，https://github.com/jaywcjlove/reference，似乎非常非常适合镜像到自己的服务器上，作为时时刻刻、随时随地的便利参考。 好奇还有什么类似的项目。 关于云服务器直接部署页面……部署了wordpress博客，搭建了数据库，但是不会使用，不会操作，所以这么长时间就放任它烂在了手里。感觉对不起这个云服务器……属于是倒了大霉碰上了我。 另外，我的服务器是2G+2G配置，据同学说，这个配置跑 MC 似乎还是比较吃力的。 关于VITS论文还在读，笔记做的是纸质的。学习完成之后，打算一股脑传上来。 关于课业 1、信号与系统作业 2、电磁场与波作业 3、美术鉴赏ppt 4、神经网络导论期末大作业 5、信号与系统课程设计 6、python语言课程作业 关于勾选框的使用方法：使用 hexo 的勾选框 6、python语言课程作业 12345678&#123;% cb 6、python语言课程作业,false %&#125;&#123;% cb text, checked?, incline? %&#125;text：显示的文字checked：默认是否已勾选，默认 falseincline: 是否内联（可以理解为后面的文字是否换行），默认 false&#123;% cb false %&#125; 也可以只传入一个参数，文字写在后边（这样不支持外联）内联就是不换行，外联就是换行。 使用 md 自带的勾选框 这是未选择 这是选择 123- [ ] 这是未选择- [x] 这是选择注意空格和 “ - ” 关于 hexo 博客的评论功能开启评论需要在主题配置中开启并指定评论模块： post: comments: enable: true type: disqus 然后在下方还要设置对应评论模块的参数，比如 disqus 对应设置： disqus: shortname: fluid 当前支持的评论插件如下： Valine (opens new window):基于 LeanCloud Waline (opens new window): 从 Valine 衍生而来，额外增加了服务端和多种功能 Gitalk (opens new window): 基于 GitHub Issues Utterances (opens new window): 基于 GitHub Issues Disqus (opens new window): 基于第三方的服务 畅言 (opens new window): 基于第三方的服务 来必力(Livere) (opens new window): 基于第三方的服务 Remark42 (opens new window): 需要自托管服务端 Twikoo (opens new window): 基于腾讯云开发 Cusdis (opens new window): 基于第三方服务或自托管服务 Giscus (opens new window): 基于 GitHub Discussion 使用方式和参数设置请点击上面链接查看各自的文档。 若想自己添加新的评论插件，可通过自定义功能加入 &lt;script&gt;，并判断是否存在 #comments 元素进行挂载。 TIP 国内用户推荐使用 Valine、Waline 或者 twikoo 如果设置后评论模块没有显示，说明配置没有完成，或者配置有误出现报错（请在浏览器控制台查看具体报错） 如果想在某个文章页关闭评论，或者想在某个自定义页面开启评论，可以通过在 Front-matter (opens new window)设置 comment: bool 来控制评论开关，或者通过 comment: &#39;type&#39; 来开启指定的评论插件。 例如在关于页开启并指定评论插件： 12345678---title: 关于页layout: aboutindex_img: /img/example.jpgdate: 2019-10-10 10:00:00comment: &#x27;valine&#x27;---以下是正文内容 总结一下就是 主题内配置开启与参数。 高级用户可以通过自己的script客制化。 可以在页面的开头设置本页面是否开启评论、开启哪种方式的评论。 使用 gittalk 评论12345678910111213gitalk: enable: true #启用gitalk github_id: #github帐号 例：CodeHaotian id: location.pathname #此设置参照下文常见问题说明 repo: #存放评论的仓库名称 client_id: #application的id，即上文Client ID client_secret: #application的密码，即上文Client Secret admin_user: #页面显示联系**初始化评论 例：CodeHaotian distraction_free_mode: true # Facebook-like distraction free mode # Gitalk&#x27;s display language depends on user&#x27;s browser or system environment # If you want everyone visiting your site to see a uniform language, you can set a force language value # Available values: en | es-ES | fr | ru | zh-CN | zh-TW language: zh-CN 这种方法需要一个github application，一个github repo，一个github账号。","categories":[],"tags":[]},{"title":"Numpy 和 Matplotlib 的使用","slug":"Numpy-和-Matplotlib-的使用","date":"2023-04-26T10:41:49.000Z","updated":"2023-05-04T15:51:45.561Z","comments":true,"path":"2023/04/26/Numpy-和-Matplotlib-的使用/","link":"","permalink":"http://petertan303.github.io/2023/04/26/Numpy-%E5%92%8C-Matplotlib-%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"首先，import一下： 123import numpy as npimport matplotlibimport matplotlib.pyplot as plt NumpyNumpy是Python的一个科学计算的库，提供了矩阵运算的功能，其一般与Scipy、matplotlib一起使用。其实，list已经提供了类似于矩阵的表示形式，不过numpy为我们提供了更多的函数。 **操作的对象有两种，一种是 N 维数组对象 ndarray，另一种是矩阵 matrix**。 数据类型也很多，虽然不需要像C一样指定，但数据确实是有数据类型的。 创建一个 ndarry 对象123456789101112131415161718numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)# 必须的只有object，也就是数组对象，新建的 ndarry 内容和 object 完全一致。# 可以输入多个 object，这样会被视为多维度 ndarry。# numpy.empty(shape, dtype = float, order = &#x27;C&#x27;)numpy.asarray(a, dtype = None, order = None)numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0)numpy.fromiter(iterable, dtype, count=-1)numpy.arange(start, stop, step, dtype)np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)","categories":[],"tags":[]},{"title":"2023年4月23日","slug":"2023年4月23日","date":"2023-04-23T15:14:53.000Z","updated":"2023-04-23T15:52:00.664Z","comments":true,"path":"2023/04/23/2023年4月23日/","link":"","permalink":"http://petertan303.github.io/2023/04/23/2023%E5%B9%B44%E6%9C%8823%E6%97%A5/","excerpt":"","text":"关于so-vits-svc首先，这是一个很牛逼的项目，极大简化了训练和音色迁移的过程，随着团队的接手，他们甚至加上了webUI。 但是。 他们把项目存了档，我不知道是什么让他们这么做的，但他们就是这么干了。我的评价是这是一个极其弱智且不负责任的行为，因为随着项目的存档，关于该项目的所有issue全部丢失。issue堪称这个项目的贡献者与使用者浓度最高的聚居地，绝大多数讨论都是在issue内进行，只有极少部分有典型性的问题会被搬运到其他平台。 关了之后，当人们碰到问题，或试图参与开发时，想上网寻找相关资料，在搜索引擎里敲入相关字眼，引入眼帘的永远是已经关闭了的issue。 无论如何，项目是他们的，我没有参与贡献，我只是一个学习者，他们确确实实有权决定这个项目的一切。 不过我也确确实实的很不爽。 然后，黑泥结束，让我来夸夸这个项目。 VITS是一个文字转语音的网络，最大的特征是对抗学习和时长预测。论文涉及到不少我本人知识范围以外的东西，在在试着读透。 我在AutoDL上租了一块GPU进行训练。 开始的时候，我以为本地并不足以支持音色迁移的工作完成，所以音色迁移都是交给云端来完成的，现在想想浪费了不少资源。 后来，我开始训练翎羽的语音资料。 解释一下，翎羽是游戏明日方舟的一个角色，有中、日、韩、英四国语音，各有33条。一开始，我是使用日文语音进行训练的，日文语音总时长在三分钟左右。总共运行了63500步，然后我认为，仅仅三分钟的语音不足以构建出色的模型，于是停止了训练，导入了新的语音。 但是事实上，在这个项目中，模型和训练数据集语音直接挂钩，甚至可以说是一一对应，连顺序都不能替换。但我并没有意识到这一点，也没有人和我说，于是，我放弃了现有的训练数据集，后面的事情可想而知。 我跑了六万步的模型尚未完成，卡在不能训练和不能用之间，或者说，在我随机排列32条语音找到正确顺序之前，我无法对其进行进一步训练；同时由于训练步数原因，产生的音频电流声巨大，完全不能使用。 更糟糕的是，我使用的新训练集是四国语音复合的，也就是说实际上是四个人的语音素材。新训练集跑了三万多步，实际效果可谓是一团浆糊。 而我花了很久才意识到这一点。 关于VITS论文于三年前发表，属于是经典之一。正在读论文。 关于其他类似项目DDSP-SVC。 按照介绍，这是一个针对低显存设备进行特别优化的项目。我本人的笔记本电脑是惠普的战99，使用的是nvidia t600入门级专业卡，内存只有可怜的4G。 要不然我为什么要租显卡…… 还没用，但很期待。","categories":[],"tags":[]},{"title":"2023年4月19日","slug":"2023年4月19日","date":"2023-04-19T11:07:00.000Z","updated":"2023-04-19T14:19:56.152Z","comments":true,"path":"2023/04/19/2023年4月19日/","link":"","permalink":"http://petertan303.github.io/2023/04/19/2023%E5%B9%B44%E6%9C%8819%E6%97%A5/","excerpt":"","text":"亲爱的日记：关于vits前几天发现了autodl这个GPU租用平台，于是充了15块钱，拿来跑vits。 至于原因，我之前一直觉得，自家电脑环境有问题、显存也不够，不足以支撑运算。于是租了三块，每块用多少扣多少钱，一个小时0.78元，可以说是相当便宜。 刚刚回忆了一下，之前监控的内存占用，是不是只有2G多，还有快到离谱（训练一分钟歌曲只需要零点几秒）的速度，又想起还有conda这个环境管理器，于是在自己电脑上试了试。 事实证明，能跑，而且，对显存要求很低。大概只占用了1G多。虽然确实慢了不少，78秒的音频文件，使用了61秒跑完。尽管确实很慢，但比我想象中还是快太多了。 这下不需要忧心忡忡等GPu空闲了。也不需要开着filezilla等着文件传输的完成。更不需要熄灯后用手机热点慢慢传数据了。 但是训练模型，应该还是需要更牛逼的GPU来干。 关于spleeter这是一个分割音频中人声、伴奏的开源工程，只有11M左右。GUI版本甚至更小，只有10M。 我正在试图解读。 还是关于vitsvits和so-vits-svc有本质区别，虽然我把这俩混为一谈。vits，很小，只有14m；so-vits-svc，更小，小的超乎想象，只有9m。 但是事实上这俩确实是两码事。vits比较大可能是因为自带了测试样品。 so-vits-svc，SoftVC VITS Singing Voice Conversion。 vits，VITS，Conditional Variational Autoencoder with Adversarial Learning for End-to-End Text-to-Speech。 这是VITS的论文。 https://arxiv.org/abs/2106.06103 https://petertan303.github.io/img/2106.06103.pdf 关于hexo博客插入pdf在线预览https://lizhening.github.io/posts/7d20ce7f/ 简单概括就是： hexo-pdf插件。通过npm安装，注意是在hexo根目录下执行该语句。npm install --save hexo-pdf &#123;% pdf 链接 %&#125;的形式插入即可，例如&#123;% pdf http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125; 那么，我这个就是: 另外注意pdf可以直接放在source文件夹里面。似乎并不可以……还是放在img文件夹里得了。 好吧，还是有点问题。现在好了。真不错。 正事 py作业 it英语作业 体测：周四 数字系统实验报告（纸质） 实际实验 仿真实验：延时灯 交通灯 美术鉴赏作业 复习 人工智能基础 电磁场与波 不是正事希望可以找时间解决了…… VITS论文阅读 VITS代码阅读 so-vits-svc代码阅读","categories":[],"tags":[]},{"title":"关于香橙派显示屏","slug":"关于香橙派显示屏","date":"2023-04-11T10:33:01.000Z","updated":"2023-04-12T05:56:51.963Z","comments":true,"path":"2023/04/11/关于香橙派显示屏/","link":"","permalink":"http://petertan303.github.io/2023/04/11/%E5%85%B3%E4%BA%8E%E9%A6%99%E6%A9%99%E6%B4%BE%E6%98%BE%E7%A4%BA%E5%B1%8F/","excerpt":"","text":"香橙派店家资料LCD 显示屏和开发板的接线方式如下所示 对应到手头的显示屏 TFT SPI 模块引脚 开发板26pin 对应的引脚 GPIO – GPIO num 3.3v VCC 1 号引脚 GND GND 6 号引脚 T_CS CS 24 号引脚 RST RESET 7 号引脚 PC9 – 73 AO(LCD_RS) D&#x2F;C 11 号引脚 PC6 – 70 MOSI&#x2F;SDI SDI(MOSI) 19 号引脚 SDK SCK 23 号引脚 ? LED 13 号引脚 PC5 – 69 MISO SDO(MISO) 21 引脚 显示屏店家资料 解释 16 14 12 10 8 6 4 2 电路板 T_CLK NC MOSI NC CS SCK NC GND 原理图 T_CLK - T_MOSI - LCD_CS LCD_SCL - GND 解释 时钟？ - 输入 - 片选信号 时钟信号 - 地 - 17 15 13 11 9 7 5 3 电路板 T_CS PEN MISO SDI AO RST BL 3.3V 原理图 T_CS T_PEN T_MISO LCD_SDI LCD_RS LCD_RST IO_BK 3.3v 解释 片选信号 ？ 输出 传递数据 命令&#x2F;数据 重置 ？ 电源 一般来说是标准七脚，分别是GND，VCC，D0，D1，RES，DC，CS GND：接地 VCC：供电 DO：Master input slave output，MISO， DI：Master output slave input，MOSI， RES：RST，复位 DC：RS，在只有MOSI的情况下控制写入数据还是命令，这个时候没有MISO CS：CE，SSEL，SS，片选信号 SCLK：时钟信号 放在这块显示屏上，则是 GND：接地 VCC：供电 DO：T_MISO DI：T_MOSI，LCD_SDI RES：LCD_RST DC：LCD_RS CS：T_CS SCLK：T_CLK，LCD_SCL 公用的有 GND 3.3v IO_BK LCD开头的有 LCD_CS LCD_SCL（CLK） LCD_SDI（MOSI） LCD_RS LCD_RST T开头的有 T_CLK T_MOSI T_MISO T_CS T_PEN 公用三个，T开头LCD开头各五个，共计16个，三个NC 基本参数： 240 X RGB X 320 驱动：fb_ili9341 使用ssh传输文件：123scp root@192.168.3.29:/boot/boot.bmp .scp &quot;burythelight2 (online-audio-converter.com).rar&quot; root@192.168.3.29:/.","categories":[],"tags":[]},{"title":"嵌入式操作系统","slug":"嵌入式操作系统","date":"2023-04-11T09:13:57.000Z","updated":"2023-04-11T23:58:20.592Z","comments":true,"path":"2023/04/11/嵌入式操作系统/","link":"","permalink":"http://petertan303.github.io/2023/04/11/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"现有嵌入式操作系统Mobile operating systems DIP DOS on Atari Portfolio Embedded Linux (see also Linux for mobile devices) Android CalyxOS DivestOS EMUI Flyme OS GrapheneOS LineageOS MIUI Replicant See also List of custom Android distributions Firefox OS KaiOS Ångström distribution Familiar Linux Mæmo based on Debian deployed on Nokia’s Nokia 770, N800 and N810 Internet Tablets. OpenZaurus webOS from Palm, Inc., later Hewlett-Packard via acquisition, and most recently at LG Electronics through acquisition from Hewlett-Packard[39] Access Linux Platform bada Openmoko Linux OPhone MeeGo (from merger of Maemo &amp; Moblin) Mobilinux MotoMagx Qt Extended Sailfish OS Tizen (earlier called LiMo Platform) Ubuntu Touch PostmarketOS Inferno (distributed OS originally from Bell Labs) Magic Cap MS-DOS on Poqet PC, HP 95LX, HP 100LX, HP 200LX, HP 1000CX, HP OmniGo 700LX NetBSD Newton OS on Apple MessagePad Palm OS from Palm, Inc; now spun off as PalmSource PEN&#x2F;GEOS on HP OmniGo 100 and 120 PenPoint OS Plan 9 from Bell Labs PVOS Symbian OS EPOC Windows CE, from Microsoft Pocket PC from Microsoft, a variant of Windows CE Windows Mobile from Microsoft, a variant of Windows CE Windows Phone from Microsoft DSPnano RTOS iOS watchOS tvOS iPod software iPodLinux iriver clix OS RockBox BlackBerry OS PEN&#x2F;GEOS, GEOS-SC, GEOS-SE Palm OS Symbian platform (successor to Symbian OS) BlackBerry 10 HarmonyOS - Routers CatOS – by Cisco Systems Cisco IOS – originally Internetwork Operating System by Cisco Systems DNOS – by DriveNets Inferno – distributed OS originally from Bell Labs IOS-XR – by Cisco Systems JunOS – by Juniper Networks LCOS – by LANCOM Systems[40] Linux OpenWrt DD-WRT LEDE Gargoyle LibreCMC Zeroshell FTOS – by Force10 Networks FreeBSD m0n0wall OPNsense pfsense List of wireless router firmware projects - Other embedded Apache Mynewt ChibiOS&#x2F;RT Contiki ERIKA Enterprise eCos NetBSD Nucleus RTOS[41] NuttX Minix NCOS freeRTOS, openRTOS, safeRTOS Fuchsia OpenEmbedded (or Yocto Project) OpenHarmony pSOS (Portable Software On Silicon) QNX – Unix-like real-time operating system, aimed primarily at the embedded systems market.[42] REX OS – microkernel; usually an embedded cell phone OS RIOT ROM-DOS TinyOS ThreadX RT-Thread DSPnano RTOS Windows IoT – formerly Windows Embedded Windows CE Windows IoT Core Windows IoT Enterprise Wind River VxWorks RTOS.[17] Wombat – microkernel; usually real-time embedded Zephyr LEGO Mindstorms brickOS leJOS 介绍1234567An embedded operating system is an operating system for embedded computer systems. Embedded operating systems are computer systems designed to increase functionality and reliability for achieving a specific task.[1] Resource efficiency comes at the cost of losing some functionality or granularity that larger computer operating systems provide, including functions that may not be used by the specialized applications run. Depending on the method used for multitasking, this type of OS is frequently considered a real-time operating system or RTOS. Embedded systems are mostly used as Real-time operating systems.All embedded systems contain a processor and software. There must be a place for embedded software to store the executable code and temporary storage for run-time data manipulations. These take the form of ROM and RAM, respectively. All embedded systems must also contain some form of inputs and outputs to function. Within the exception of these few common features, the rest of the embedded hardware is usually unique and varies from application to application.[2] The hardware running an embedded operating system can be very limited in resources; therefore the embedded design of these operating systems may have a narrow scope tailored to a specific application to achieve the desired operation under these constraints. The embedded operating system that organizes and controls the hardware usually determines the rest of the embedded hardware needed.To take better advantage of the processing power of the CPU, software developers may write critical code directly in assembly. This machine efficient language can potentially result in gains in speed and determinism at the cost of portability and maintainability. Often, embedded operating systems are written entirely in more portable languages, like C, however.An important difference between most embedded operating systems and desktop operating systems is that the application, including the operating system, is usually statically linked into a single executable image. Unlike a desktop operating system, the embedded operating system does not load and execute many applications.[3] This means that the system is only able to run a few application(s). 种类，构成，应用","categories":[],"tags":[]},{"title":"2023年4月8日","slug":"2023年4月8日","date":"2023-04-08T09:32:42.000Z","updated":"2023-04-08T10:36:20.294Z","comments":true,"path":"2023/04/08/2023年4月8日/","link":"","permalink":"http://petertan303.github.io/2023/04/08/2023%E5%B9%B44%E6%9C%888%E6%97%A5/","excerpt":"","text":"用 Python 读取&amp;解析 jsonjson 范例： 123456789&#123; &quot;name&quot;: &quot;United States&quot;, &quot;population&quot;: 331002651, &quot;capital&quot;: &quot;Washington D.C.&quot;, &quot;languages&quot;: [ &quot;English&quot;, &quot;Spanish&quot; ]&#125; JSON以键值对的形式传递数据，类似XML，XML示例： 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;country&gt; &lt;name&gt;United States&lt;/name&gt; &lt;population&gt;331002651&lt;/population&gt; &lt;capital&gt;Washington D.C.&lt;/capital&gt; &lt;languages&gt; &lt;language&gt;English&lt;/language&gt; &lt;language&gt;Spanish&lt;/language&gt; &lt;/languages&gt;&lt;/country&gt; 众所周知，Python原生支持JSON数据，json模块是标准库的一部分，无序手动解析。 可以将JSON数据从JSON格式转换到等效的Python对象，例如dictionary和list。JSON模块还可以将Python对象转换为JSON格式。 具体使用：将json字符串转化为字典传入：字符串格式的 json 数据。 123456import json# 导入json包country = &#x27;&#123;&quot;name&quot;: &quot;United States&quot;, &quot;population&quot;: 331002651&#125;&#x27;# 定义字符串，json，countrycountry_dict = json.loads(country)# 使用json.loads()方法处理country 结果country_dict是字典。 注意，json内数据类型和Python内有一一对应的关系。 JSON Python object dict array list string str number (integer) int number (real) float true True false False null None 将json文件转化为字典使用open()方法导入文件，然后使用json.loads()处理读入的字符串。 123456import jsonwith open(&#x27;united_states.json&#x27;) as f: data = json.load(f)print(type(data)) 测试结果： python 字典单向读取，打印时呈现json格式。 用 Python 调用 api12345import requestsdef request_data(url): req = requests.get(url, timeout=30) # 请求连接 req_jason = req.json() # 获取数据 return req_jason 也就是通过requests包里的requests.get(url,timeout)进行获取内容，这个方法会返回一个字符串。 Python 正则模块 reQ：如何将非标准json数据（例如nga的api）掐头去尾？ A：使用re的findall()模块 12345678# 处理形如ashdasbdh(# 中间是json# );import redt = re.findall(r&#x27;[(](.*?)[)]&#x27;, text)data_json = json.loads(dt[0])print(dt)print(data_json) vscode json 自动排版使用json tools工具内的 ctrl+alt+M快捷键","categories":[],"tags":[]},{"title":"专业认知与探索期末作业","slug":"专业认知与探索期末作业","date":"2023-03-16T02:58:26.000Z","updated":"2023-04-23T15:21:49.342Z","comments":true,"path":"2023/03/16/专业认知与探索期末作业/","link":"","permalink":"http://petertan303.github.io/2023/03/16/%E4%B8%93%E4%B8%9A%E8%AE%A4%E7%9F%A5%E4%B8%8E%E6%8E%A2%E7%B4%A2%E6%9C%9F%E6%9C%AB%E4%BD%9C%E4%B8%9A/","excerpt":"","text":"截止时间：周五，也就是明天晚上 要求： 期末题目：用TX-1C学习板实现下列题目中的一个，每人独立完成。 必须完成基本要求，其它功能可以自行添加。 用学习板和超声模块实现超声测距，并用点阵或液晶显示。基本要求：使用超声测距模块进行距离测试，用点阵显示超声波测试的距离，距离越近，点阵中亮的点越少；距离越远，点阵中亮的点越多。（超声测距模块需要大家自己购买，参考型号是HC-SR04） 用学习板和超声模块实现超声测距，并用数码管显示距离。基本要求：使用超声测距模块进行距离测试，并用数码管显示测距结果。（超声测距模块需要大家自己购买，参考型号是HC-SR04） 利用键盘和1602液晶显示器实现简易计算器基本要求：利用矩阵键盘和独立键盘实现一个计算器，计算器必须具备加减乘除功能，并利用1602液晶显示输入的数据和计算结果。计算器的其它功能根据个人能力添加。 利用键盘和数码管实现简易计算器基本要求：利用矩阵键盘和独立键盘实现一个计算器，计算器必须具备加减乘除功能，并利用数码管显示输入的数据和计算结果。计算器的其它功能根据个人能力添加。 利用键盘、发光二极管和数码管实现一个交通信号灯基本要求：指定发光二极管代表红黄绿灯，绿灯亮20s后，黄灯闪烁3s，然后红灯再亮20s，交替变化。当红灯只剩5s时长时，数码管按秒显示倒计时；当绿灯只剩5s时长时，数码管按秒显示倒计时；黄灯工作的3s期间，指定某个发光二极管以500ms为间隔闪烁。根据个人能力实现单向或十字路口交通灯。 基于课程所学内容，自己拟定实验项目和内容，完成实验，并提交报告。 注意：期末项目电子版实验报告提交给助教，报告以“学号+姓名+期末题目”形式命名，时间可以放宽到下学期开学第三周之前。是否安排现场验收，视疫情情况而定。 没有超声模块，排除1、2 选择4：数码管、键盘、计算器 1602液晶显示屏不熟悉，排除 交通灯：考虑 计算器： 计算：加减乘除 需要指定按键：keyscan()，使用所有键盘 十个数字：0~9 加减乘除，四个以上 清零 其他功能 显示屏：display()，显示加减乘除的符号、数字 应该没了？ 交通灯： 指定发光二极管代表红黄绿灯 绿灯亮20s后，黄灯闪烁3s，然后红灯再亮20s，交替变化。 当红灯只剩5s时长时，数码管按秒显示倒计时；当绿灯只剩5s时长时，数码管按秒显示倒计时；黄灯工作的3s期间，指定某个发光二极管以500ms为间隔闪烁。根据个人能力实现单向或十字路口交通灯。 单向： 四个灯，绿灯红灯黄灯和500ms闪烁灯 计时： 绿灯20s，黄灯3s和闪烁灯500ms爆闪，红灯20s 数码管5s倒计时：红灯、绿灯；3s倒计时：黄灯 没了？ 十字路口： 两个单向？ 计算器： 数字表 有小数点 无小数点 运算 display() 实时显示数字，不显示符号 keyscan() - 计算器 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149#include &lt;reg52.h&gt;//定义行引脚sbit hang[]=&#123;P3^7,P3^6,P3^5,P3^4&#125;; //定义列引脚sbit lie[]=&#123;P3^3,P3^2,P3^1,P3^0&#125;;char key[4][4]=&#123; &#123;&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;0&#x27;&#125;, &#123;&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;k&#x27;&#125;, &#123;&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;=&#x27;&#125;, &#123;&#x27;a&#x27;, &#x27;m&#x27;, &#x27;x&#x27;, &#x27;p&#x27;&#125;&#125;;// 加减乘除int num[7]=&#123;0&#125;;int cal_num[2]=&#123;0&#125;;char fuhao=0;unsigned char code num1[]= //没有小数点的0-9对应编码&#123;0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f&#125;;unsigned char code num2[]= &#123;0xbf,0x86,0xdb,0xcf,0xe6,0xed,0xfd,0x87,0xff,0xef&#125;;unsigned char code place[]=&#123;0xfe,0xfd,0xfb,0xf7,0xf5,0xf3,0xf1&#125;;void delay(int z)&#123; int i,j; for(i=z;i&gt;0;i--); for(j=110;j&gt;0;j--);&#125;void display()&#123; int i=0; int temp = cal_num[0]; for(i=0;i&lt;7&amp;&amp;temp&gt;0;i++)&#123; num[i]=temp%10; temp/=10; &#125; for(i=0;i&lt;7;i++)&#123; wela=1; P0=place[i]; wela=0; P0=0x00; dula=1; //P0=(i==1?num2[num[i]]:num1[num[i]]); P0 = cal_num[1]; delay(10); dula=0; P0=0xff; &#125; return;&#125;char keyscan()&#123; char input; int i=0,j=0; for(j=0;j&lt;4;j++)&#123; P3=0xff; hang[j]=0; for(i=0;i&lt;4;i++)&#123; if(lie[i]==0) &#123; delay(10); if(lie[i]==0) &#123; while(lie[i]==0); input=key[i][j]; &#125; &#125; &#125; &#125; return input;&#125;int calculate(char input)&#123; int temp=0; switch(input)&#123; case &#x27;1&#x27;: case &#x27;2&#x27;: case &#x27;3&#x27;: case &#x27;4&#x27;: case &#x27;5&#x27;: case &#x27;6&#x27;: case &#x27;7&#x27;: case &#x27;8&#x27;: case &#x27;9&#x27;: case &#x27;0&#x27;: cal_num[1] = cal_num[1]*10 + ((int)input - &#x27;0&#x27;) break; case &#x27;a&#x27;: case &#x27;m&#x27;: case &#x27;x&#x27;: case &#x27;p&#x27;: case &#x27;=&#x27;: switch(fuhao)&#123; case &#x27;a&#x27;: cal_num[0]+=cal_num[1]; break; case &#x27;m&#x27;: cal_num[0]-=cal_num[1]; break; case &#x27;x&#x27;: cal_num[0]*=cal_num[1]; break; case &#x27;p&#x27;: cal_num[0]/=cal_num[1]; break; case &#x27;=&#x27;: case default: break; &#125; cal_num[1]=0; fuhao = input; break; case default: break; &#125;&#125;void main()&#123; //init char input=0; //begin while(1)&#123; display(); input = keyscan(); calculate(input); &#125; return;&#125; 修改后include &lt;reg52.h&gt;sbit dula=P2^6; //dula与wela为两个使能端sbit wela=P2^7;////定义行引脚sbit lie1=P3^7;sbit lie2=P3^6;sbit lie3=P3^5;sbit lie4=P3^4;// ////定义列引脚sbit hang1=P3^3;sbit hang2=P3^2;sbit hang3=P3^1;sbit hang4=P3^0;char key[4][4]=&#123; &#123;&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;0&#x27;&#125;, &#123;&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;k&#x27;&#125;, &#123;&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;=&#x27;&#125;, &#123;&#x27;a&#x27;, &#x27;m&#x27;, &#x27;x&#x27;, &#x27;p&#x27;&#125;&#125;;// 加减乘除long int cal_num[3]=&#123;0,0,0&#125;;char fuhao=0;char input=0;unsigned char code num1[]= //没有小数点的0-9对应编码&#123;0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f&#125;;unsigned char code num2[]= &#123;0xbf,0x86,0xdb,0xcf,0xe6,0xed,0xfd,0x87,0xff,0xef&#125;;unsigned char code place[]=&#123; //0111_1111 7f //1011_1111 bf //1101_1111 df //1110_1111 ef //1111_0111 f7 //1111_1011 fb //1111_1101 fd //1111_1110 fe0xfe,0xfd,0xfb,0xf7,0xef,0xdf,0xbf,0x7f&#125;;void delay(int z)&#123; int i,j; for(i=z;i&gt;0;i--); for(j=110;j&gt;0;j--);&#125;void display()&#123; int i=0; int temp = cal_num[2];// for(i=0;i&lt;7&amp;&amp;temp&gt;0;i++)&#123;// num[i]=temp%10;// temp/=10;// &#125; for(i=5;i&gt;0/*&amp;&amp;temp&gt;0*/;i--)&#123; wela=1; P0=place[i]; wela=0; P0=0x00; dula=1; P0 = num1[temp%10]; temp/=10; delay(10); dula=0; P0=0xff; &#125; delay(100); return;&#125;//char keyscan()//&#123;// char input;// int i=0,j=0;// for(j=0;j&lt;4;j++)&#123;// P3=0xff;// hang[j]=0;// for(i=0;i&lt;4;i++)&#123;// if(lie[i]==0)// &#123;// delay(10);// if(lie[i]==0)// &#123;// while(lie[i]==0);// input=key[i][j];// &#125;// &#125;// &#125;// &#125;// return input;//&#125;//char keyscan()&#123;//&#123;// char input=0;// P3|=0xff;// hang1=0;// if(lie1==0)// &#123;// delay(10);// if(lie1==0)// &#123;// while(lie1==0);// input=key[0][0];// cal_num[1] = cal_num[1]*10 + ((int)input - &#x27;0&#x27;);// &#125;// &#125;// // if(lie2==0)// &#123;// delay(10);// if(lie2==0)// &#123;// while(lie2==0);// input=key[0][1];// cal_num[1] = cal_num[1]*10 + ((int)input - &#x27;0&#x27;);// &#125;// &#125;// // // if(lie3==0)// &#123;// delay(10);// if(lie3==0)// &#123;// while(lie3==0);// input=key[0][2];// cal_num[1] = cal_num[1]*10 + ((int)input - &#x27;0&#x27;);// &#125;// &#125;// // if(lie4==0)// &#123;// delay(10);// if(lie4==0)// &#123;// while(lie4==0);// input=key[0][3];// cal_num[1] = cal_num[1]*10 + ((int)input - &#x27;0&#x27;);// &#125;// &#125;// // // P3|=0xff;// hang2=0;// if(lie1==0)// &#123;// delay(10);// if(lie1==0)// &#123;// while(lie1==0);// input=key[1][0];// cal_num[1] = cal_num[1]*10 + ((int)input - &#x27;0&#x27;);// &#125;// &#125;// // if(lie2==0)// &#123;// delay(10);// if(lie2==0)// &#123;// while(lie2==0);// input=key[1][1];// cal_num[1] = cal_num[1]*10 + ((int)input - &#x27;0&#x27;);// &#125;// &#125;// // // if(lie3==0)// &#123;// delay(10);// if(lie3==0)// &#123;// while(lie3==0);// input=key[1][2];// cal_num[1] = cal_num[1]*10 + ((int)input - &#x27;0&#x27;);// &#125;// &#125;// // if(lie4==0)// &#123;// delay(10);// if(lie4==0)// &#123;// while(lie4==0);// input=key[1][3];// &#125;// &#125;// // P3|=0xff;// hang3=0;// // if(lie1==0)// &#123;// delay(10);// if(lie1==0)// &#123;// while(lie1==0);// input=key[2][0];// cal_num[1] = cal_num[1]*10 + ((int)input - &#x27;0&#x27;);// &#125;// &#125;// // if(lie2==0)// &#123;// delay(10);// if(lie2==0)// &#123;// while(lie2==0);// input=key[2][1];// cal_num[1] = cal_num[1]*10 + ((int)input - &#x27;0&#x27;);// &#125;// &#125;// // // if(lie3==0)// &#123;// delay(10);// if(lie3==0)// &#123;// while(lie3==0);// input=key[2][2];// cal_num[1] = cal_num[1]*10 + ((int)input - &#x27;0&#x27;);// &#125;// &#125;// // if(lie4==0)// &#123;// delay(10);// if(lie4==0)// &#123;// while(lie4==0);// input=key[2][3];// cal_num[1]=0;// fuhao = input;// &#125;// &#125;// // // P3|=0xff;// hang4=0;// // if(lie1==0)// &#123;// delay(10);// if(lie1==0)// &#123;// while(lie1==0);// input=key[3][0];// cal_num[0]+=cal_num[1];// cal_num[1]=0;// fuhao = input;// &#125;// &#125;// // if(lie2==0)// &#123;// delay(10);// if(lie2==0)// &#123;// while(lie2==0);// input=key[3][1];// cal_num[0]-=cal_num[1];// cal_num[1]=0;// fuhao = input;// &#125;// &#125;// // // if(lie3==0)// &#123;// delay(10);// if(lie3==0)// &#123;// while(lie3==0);// input=key[3][2];// cal_num[0]*=cal_num[1];// cal_num[1]=0;// fuhao = input;// &#125;// &#125;// // if(lie4==0)// &#123;// delay(10);// if(lie4==0)// &#123;// while(lie4==0);// input=key[3][3];// cal_num[0]/=cal_num[1];// cal_num[1]=0;// fuhao = input;// &#125;// &#125;// return input;//&#125;//&#125;char keyscan()&#123;&#123; char input=0; P3|=0xff; hang1=0; if(lie1==0) &#123; delay(10); if(lie1==0) &#123; while(lie1==0); input=key[0][0]; &#125; &#125; if(lie2==0) &#123; delay(10); if(lie2==0) &#123; while(lie2==0); input=key[0][1]; &#125; &#125; if(lie3==0) &#123; delay(10); if(lie3==0) &#123; while(lie3==0); input=key[0][2]; &#125; &#125; if(lie4==0) &#123; delay(10); if(lie4==0) &#123; while(lie4==0); input=key[0][3]; &#125; &#125; P3|=0xff; hang2=0; if(lie1==0) &#123; delay(10); if(lie1==0) &#123; while(lie1==0); input=key[1][0]; &#125; &#125; if(lie2==0) &#123; delay(10); if(lie2==0) &#123; while(lie2==0); input=key[1][1]; &#125; &#125; if(lie3==0) &#123; delay(10); if(lie3==0) &#123; while(lie3==0); input=key[1][2]; &#125; &#125; if(lie4==0) &#123; delay(10); if(lie4==0) &#123; while(lie4==0); input=key[1][3]; &#125; &#125; P3|=0xff; hang3=0; if(lie1==0) &#123; delay(10); if(lie1==0) &#123; while(lie1==0); input=key[2][0]; &#125; &#125; if(lie2==0) &#123; delay(10); if(lie2==0) &#123; while(lie2==0); input=key[2][1]; &#125; &#125; if(lie3==0) &#123; delay(10); if(lie3==0) &#123; while(lie3==0); input=key[2][2]; &#125; &#125; if(lie4==0) &#123; delay(10); if(lie4==0) &#123; while(lie4==0); input=key[2][3]; &#125; &#125; P3|=0xff; hang4=0; if(lie1==0) &#123; delay(10); if(lie1==0) &#123; while(lie1==0); input=key[3][0]; &#125; &#125; if(lie2==0) &#123; delay(10); if(lie2==0) &#123; while(lie2==0); input=key[3][1]; &#125; &#125; if(lie3==0) &#123; delay(10); if(lie3==0) &#123; while(lie3==0); input=key[3][2]; &#125; &#125; if(lie4==0) &#123; delay(10); if(lie4==0) &#123; while(lie4==0); input=key[3][3]; &#125; &#125; return input;&#125;&#125;void calculate(char input)&#123; switch(input)&#123; case &#x27;1&#x27;: case &#x27;2&#x27;: case &#x27;3&#x27;: case &#x27;4&#x27;: case &#x27;5&#x27;: case &#x27;6&#x27;: case &#x27;7&#x27;: case &#x27;8&#x27;: case &#x27;9&#x27;: case &#x27;0&#x27;: cal_num[1] = cal_num[1]*10 + ((int)input - &#x27;0&#x27;); cal_num[2] = cal_num[1]; break; case &#x27;a&#x27;: case &#x27;m&#x27;: case &#x27;x&#x27;: case &#x27;p&#x27;: case &#x27;=&#x27;: switch(fuhao)&#123; case &#x27;a&#x27;: cal_num[1]+=cal_num[0]; break; case &#x27;m&#x27;: cal_num[1]=cal_num[0]-cal_num[1]; break; case &#x27;x&#x27;: cal_num[1]*=cal_num[0]; break; case &#x27;p&#x27;: cal_num[1]=cal_num[0]/cal_num[1]; break; case &#x27;=&#x27;: default: break; &#125; cal_num[2]=cal_num[1]; cal_num[0]=cal_num[1]; cal_num[1]=0; fuhao = input; break; case &#x27;k&#x27;: cal_num[0]=cal_num[1]=cal_num[2]=cal_num[3]=0; delay(10); break; default: break; &#125; input = 0; return;&#125;void main()&#123; //init input = 0; //cal_num[1]=123456; //display(); //begin while(1)&#123;// cal_num[1]=12345; display(); delay(10); input = keyscan(); if(input!=0) calculate(input); &#125; return;&#125;","categories":[],"tags":[]},{"title":"2023年3月6日","slug":"2023年3月6日","date":"2023-03-06T04:43:05.000Z","updated":"2023-04-23T15:17:20.886Z","comments":true,"path":"2023/03/06/2023年3月6日/","link":"","permalink":"http://petertan303.github.io/2023/03/06/2023%E5%B9%B43%E6%9C%886%E6%97%A5/","excerpt":"","text":"1昨天的 “ jj ” 是龚写的。 环境变量可以通过alias设置别名，但不能永久保存，下一次启动shell时会重置。 PATH即是一个环境变量。Ubuntu中，有系统环境变量和用户环境变量，区别在于对所有用户生效还是仅对当前用户生效。 环境变量的储存文件： 12345~/.profile# 无论是通过控制台还是图形界面启动程序时，都会自动执行该文件。~/.bashrc, ~/.bash_profile, ~/.bash_login# 当通过shell启动程序时，它们也会被加载；但当通过图形界面环境启动程序时，这些文件中的环境变量设置便不可用了。 环境变量的储存文件夹： 12345/etc/profile/etc/profile.d/etc/bash.bashrc /etc/profile.d文件夹来源于/etc/profile，目录下的*.sh，即以sh为后缀的文件都会被加载。 在图形界面环境下启动程序时，不会加载/ect/bash.bashrc里边的环境变量设置。 设置永久环境变量实例 编辑/etc/profile export 别名=&#39;指令&#39; 加载环境变量： 1source /etc/profile cat 命令cat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。 1cat [-AbeEnstTuv] [--help] [--version] fileName -n 或 –number：由 1 开始对所有输出的行数编号。 -b 或 –number-nonblank：和 -n 相似，只不过对于空白行不编号。 -s 或 –squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行。 -v 或 –show-nonprinting：使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外。 -E 或 –show-ends : 在每行结束处显示 $。 -T 或 –show-tabs: 将 TAB 字符显示为 ^I。 -A, –show-all：等价于 -vET。 -e：等价于”-vE”选项； -t：等价于”-vT”选项； 用法： 123456789cat A B &gt; C# 将文件B中的内容加上A，写入C中cat A B C &gt;&gt; D# 将B与C之间加上A，写入D中cat /dev/null &gt;&gt; A# 清空A 将语句写入环境变量： echo &#39;PATH=&quot;$PATH:./node_modules/.bin&quot;&#39; &gt;&gt; ~/.profile 如何将文件夹变为 git 版本库 进入文件夹 git init 将文件添加到本地仓库：git add 可以同时添加多个文件，用空格隔开 提交：git commit -m &quot;对于本次提交的说明&quot;","categories":[],"tags":[{"name":"日志","slug":"日志","permalink":"http://petertan303.github.io/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"jj","slug":"jj","date":"2023-03-05T10:52:07.000Z","updated":"2023-03-05T10:58:11.928Z","comments":true,"path":"2023/03/05/jj/","link":"","permalink":"http://petertan303.github.io/2023/03/05/jj/","excerpt":"","text":"AI绘画基于本地的python,python具体是啥还需自学。linux指令略知一二，ls ls-，rm，cd，ssh，hexo。。。 非常多，还需自学。 香橙派类似于一微型电脑，有一具体应用程序，可以进行相应指令输入， 阿里云盘。。 从头开始学习python以及linux，学习到何种程度具体情况具体分析。","categories":[],"tags":[]},{"title":"2023年3月5日","slug":"2023年3月5日","date":"2023-03-05T05:27:13.000Z","updated":"2023-04-23T15:19:33.239Z","comments":true,"path":"2023/03/05/2023年3月5日/","link":"","permalink":"http://petertan303.github.io/2023/03/05/2023%E5%B9%B43%E6%9C%885%E6%97%A5/","excerpt":"","text":"买的小音箱给送到其他地方去了，憨憨本色。 然后，列一下截至目前已经买的东西： 物件 价格 购买平台 备注 orange pi zero 2 本体 + 扩展板 158.90 淘宝 12元运费，总计170.90 闪迪64G内存卡 套餐 41.90 淘宝 - 0.5m hdmi线 0.99 淘宝 特惠买的，没啥用 usb 转 ttl 刷机板 4.00 淘宝 - 5v xh2.54 风扇 2.00 淘宝 - 5v3a 电源 7.00 淘宝 卖家未发货，退款 蓝牙音箱 11.9 拼多多 送到南京去了 总计 238.69 - - orange pi zero 2 进展我的香橙派连接的是寝室网络，一直在纠结要如何在寝室外使用。 刚刚意识到可以直接通过 ttl 串口登录香橙派，不一定需要 ssh 或远程桌面或显示屏。这样只需要带上电脑和 ttl 转接头和杜邦线就行了。 下一步计划是 GUI 制作。- Microwindows- MiniGui- QT- Gtk+- OpenGUI- FLTK- LingLongGUI- LearningGUI今天做了什么买了大物实验II的实验书、买了数字系统实验II的书和报告册。 然后上午摸鱼摸了一上午。 作业 周一 电磁场与波 信号与系统 需要作业本 IT英语 暂时没有作业，潜在项目 神经网络导论 周二 美术鉴赏 微处理器与嵌入式系统 可能有 人工智能基础 大物实验II 预习实验？ 周三 python语言程序设计及其应用 似乎有作业 周四 数字系统实验 asd 学术规范与论文写作 周五 唐球","categories":[],"tags":[{"name":"日志","slug":"日志","permalink":"http://petertan303.github.io/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"2023年3月4日","slug":"2023年3月4日","date":"2023-03-04T15:32:31.000Z","updated":"2023-03-05T05:26:10.822Z","comments":true,"path":"2023/03/04/2023年3月4日/","link":"","permalink":"http://petertan303.github.io/2023/03/04/2023%E5%B9%B43%E6%9C%884%E6%97%A5/","excerpt":"","text":"买了香橙派 zero 2，租了阿里云服务器。 阿里云服务器已经实现的： ftp 服务器安装 wordpress 服务器安装 远程桌面 vnc 安装 MySql 数据库 香橙派 zero 2最近一直在摆弄。安装过程中，碰上的问题： 烧录错误镜像 Paragon ExtFS for Windows无法读取 sd 卡内容 成功配置了 wi-fi，ssh，音乐播放，安装桌面 烧录镜像完成后，遇到的问题有： 端口设置开放： 先用iptables -I INPUT -p tcp --dport 端口号 -j ACCEPT 设置需要开放端口号、权限、协议 iptables-save保存 sudo netfilter-persistent save永久保存 下一次使用需要sudo netfilter-persistent reload ftp 搭建失败 未解决 aplay 调节音量：差点把自己弄聋（开玩笑） man aplay查看帮助 aplay -D plughw:0,0 xxx.wav指定播放设备 alsamixer设置音量 broot 安装失败 直接下载安装包，未解决 git 无法提交 重新设置 putty push 的时候卡在最后：添加参数sendpack.sideband git config --global sendpack.sideband false git config --local sendpack.sideband false 网络更换手机热点 conda 很慢很卡 安装mamba 安装 vnc 失败 未解决 解压 rar 需要 unrar e 包名（直接解压）或 unrar x 包名（创建新目录） 买了风扇、蓝牙音箱等等配件。 清单： 物件 价格 购买平台 备注 orange pi zero 2 本体 + 扩展板 158.90 淘宝 12元运费 闪迪64G内存卡 套餐 41.90 淘宝 0.5m hdmi线 0.99 淘宝 特惠买的，没啥用 usb 转 ttl 刷机板 4.00 淘宝 5v xh2.54 风扇 2.00 淘宝 5v3a 电源 7.00 淘宝 卖家未发货，退款 蓝牙音箱 11.9 拼多多 本来打算买有线喇叭，脑子一热就买了 vist借龚的电脑跑出了模型。遇到的问题有： 安装包需要 anaconda pip 换源 临时：pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package 永久：pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple numpy 和 python 版本不匹配 卸载重装 安装 cuda 官网下载安装 占用储存巨大 requirements.txt 依赖没写完整 手动安装依赖 pip、conda 无法卸载 python 用 conda 直接安装 另一个版本的 python 或者用 anaconda 创建一个全新环境，创建时配置默认 python 但是储存占用……好吧、必要的牺牲 我自己电脑配置环境，遇到的问题： 最大问题：显存过小，至少需要 4.3G 而我只有 4G conda 无法更换 python 版本 同龚 但是龚的电脑可以随便折腾，不用担心储存不够。真的爽！ stable-diffusion 绘图时间太久了，想不起来，下次再写","categories":[],"tags":[{"name":"日志","slug":"日志","permalink":"http://petertan303.github.io/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"2023年2月5日","slug":"2023年2月5日","date":"2023-02-05T11:17:48.000Z","updated":"2023-02-05T11:26:19.500Z","comments":true,"path":"2023/02/05/2023年2月5日/","link":"","permalink":"http://petertan303.github.io/2023/02/05/2023%E5%B9%B42%E6%9C%885%E6%97%A5/","excerpt":"","text":"测试网易云音乐的插件 原版 测试增大高度 测试自动播放 测试边框","categories":[],"tags":[{"name":"Test","slug":"Test","permalink":"http://petertan303.github.io/tags/Test/"}]},{"title":"2023年1月21日","slug":"2023年1月21日","date":"2023-01-21T11:43:16.000Z","updated":"2023-01-21T12:32:29.799Z","comments":true,"path":"2023/01/21/2023年1月21日/","link":"","permalink":"http://petertan303.github.io/2023/01/21/2023%E5%B9%B41%E6%9C%8821%E6%97%A5/","excerpt":"","text":"http-serverhttp-server可以通过在本地文件夹内运行来实现预览网站的功能。或者说，让任意一个目录成为服务器的目录。默认打开index.html，如果没有，会生成一个默认网页，里面有文件夹内所有内容。 一般默认的网址为192.168.1.2:8081和127.0.0.1:8081，前者可以通过在同一路由下的其他设备访问，后者只能在本设备内查看。 “程序员游戏” 网页游戏： https://screeps.com/ https://codecombat.cn/play https://www.codingame.com/start https://www.binancemag.com/?id=23707 steam 游戏： SHENZHEN I&#x2F;O SpaceChem TIS - 100 Human Source Machine A &#x3D; B","categories":[],"tags":[{"name":"日志","slug":"日志","permalink":"http://petertan303.github.io/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"试图学习CSS","slug":"试图学习CSS","date":"2023-01-20T03:54:55.000Z","updated":"2023-01-20T05:06:57.050Z","comments":true,"path":"2023/01/20/试图学习CSS/","link":"","permalink":"http://petertan303.github.io/2023/01/20/%E8%AF%95%E5%9B%BE%E5%AD%A6%E4%B9%A0CSS/","excerpt":"","text":"基本语法格式CSS &#x3D; 选择器 + 声明块 例： 1234p &#123; color: red; text-align: center;&#125; p 为选择器，指向&lt;p&gt;标签。属性 - 冒号 - 属性值 - 分号。 注释同 C ，/*注释*/。 CSS的使用 外部CSS 例如，html内的一句&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;，指向mystyle.css： 12345678body &#123; background-color: lightblue;&#125;h1 &#123; color: navy; margin-left: 20px;&#125; 内部css html文件中，head部分的&lt;style&gt;元素中进行定义。 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt;body &#123; background-color: linen;&#125;h1 &#123; color: maroon; margin-left: 40px;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;This is a heading&lt;/h1&gt;&lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 行内css（内联样式） 将style属性赋予某个元素。 123456789&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1 style=&quot;color:blue;text-align:center;&quot;&gt;This is a heading&lt;/h1&gt;&lt;p style=&quot;color:red;&quot;&gt;This is a paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 层叠顺序当为某个 HTML 元素指定了多个样式时，会使用哪种样式呢？ 页面中的所有样式将按照以下规则“层叠”为新的“虚拟”样式表，其中第一优先级最高： 1.行内样式（在 HTML 元素中） 2.外部和内部样式表（在 head 部分） 3.浏览器默认样式 因此，行内样式具有最高优先级，并且将覆盖外部和内部样式以及浏览器默认样式。 css内容颜色 颜色名 赋颜色的一种方式 背景色 12&lt;h1 style=&quot;background-color:DodgerBlue;&quot;&gt;China&lt;/h1&gt;&lt;p style=&quot;background-color:Tomato;&quot;&gt;China is a great country!&lt;/p&gt; 文本颜色 123&lt;h1 style=&quot;color:Tomato;&quot;&gt;China&lt;/h1&gt;&lt;p style=&quot;color:DodgerBlue;&quot;&gt;China is a great country!&lt;/p&gt;&lt;p style=&quot;color:MediumSeaGreen;&quot;&gt;China, officially the People&#x27;s Republic of China...&lt;/p&gt; 边框颜色 123&lt;h1 style=&quot;border:2px solid Tomato;&quot;&gt;Hello World&lt;/h1&gt;&lt;h1 style=&quot;border:2px solid DodgerBlue;&quot;&gt;Hello World&lt;/h1&gt;&lt;h1 style=&quot;border:2px solid Violet;&quot;&gt;Hello World&lt;/h1&gt; 颜色值 使用RGB值、HEX值、HSL值、RGBA值或者HSLA值来指定颜色。 123456&lt;h1 style=&quot;background-color:rgb(255, 99, 71);&quot;&gt;...&lt;/h1&gt;&lt;h1 style=&quot;background-color:#ff6347;&quot;&gt;...&lt;/h1&gt;&lt;h1 style=&quot;background-color:hsl(9, 100%, 64%);&quot;&gt;...&lt;/h1&gt;&lt;h1 style=&quot;background-color:rgba(255, 99, 71, 0.5);&quot;&gt;...&lt;/h1&gt;&lt;h1 style=&quot;background-color:hsla(9, 100%, 64%, 0.5);&quot;&gt;...&lt;/h1&gt; 直接使用RGB：rgb(red, green, blue) 使用RGBA：有不透明度的RGB 背景12345678910111213body &#123; background-color: lightblue;/* 背景色 */ opacity: 0.3;/* 不透明度 */ background-image: url(&quot;paper.gif&quot;);/* 背景图像 */&#125;/* 以及 */body &#123; background-image: url(&quot;tree.png&quot;); background-repeat: no-repeat; background-position: right top; background-attachment: fixed;&#125; 简写： 123body &#123; background: #ffffff url(&quot;tree.png&quot;) no-repeat right top;&#125; 在使用简写属性时，属性值的顺序为： background-color background-image background-repeat background-attachment background-position 轮廓（不同于边框）CSS 拥有如下轮廓属性： outline-style outline-color outline-width outline-offset outline 文本 文本对齐 文本方向 垂直对齐 文字装饰 大小写自动转换 缩进 字符间距 行高 字间距 文字阴影 斜体 粗细 大小 CSS 盒子模型CSS 选择器布局方式CSS3","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://petertan303.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"未完待续","slug":"未完待续","permalink":"http://petertan303.github.io/tags/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/"}]},{"title":"2023年1月20日","slug":"2023年1月20日","date":"2023-01-20T03:42:26.000Z","updated":"2023-01-20T11:36:58.811Z","comments":true,"path":"2023/01/20/2023年1月20日/","link":"","permalink":"http://petertan303.github.io/2023/01/20/2023%E5%B9%B41%E6%9C%8820%E6%97%A5/","excerpt":"","text":"关于阿里云ESC的应用本质是一个可租赁服务器。要用于搭建博客，需要安装Apache（服务器软件）、MariaDB数据库（或者MySql）、PHP，然后通过WordPress完成博客的搭建。 CSS的学习笔记 测试html元素的插入hhhhh 12&lt;p&gt;&lt;b&gt;hhhhh&lt;/b&gt;&lt;/p&gt;","categories":[],"tags":[{"name":"日志","slug":"日志","permalink":"http://petertan303.github.io/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"总结一下hexo-theme-fluid的使用方法","slug":"总结一下hexo-theme-fluid的使用方法","date":"2023-01-17T02:16:35.000Z","updated":"2023-01-17T03:32:21.729Z","comments":true,"path":"2023/01/17/总结一下hexo-theme-fluid的使用方法/","link":"","permalink":"http://petertan303.github.io/2023/01/17/%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8Bhexo-theme-fluid%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"来看看罢？","text":"全局 设置文章默认封面：12post: default_index_img: /img/example.jpg 代码块设置：123456789101112code: copy_btn: true highlight: enable: true line_number: true lib: &quot;highlightjs&quot; highlightjs: style: &#x27;Github Gist&#x27; bg_color: false prismjs: style: &quot;default&quot; preprocess: true copy_btn: 是否开启复制代码的按钮 line_number: 是否开启行号 highlight: 是否开启代码高亮 lib: 选择生成高亮的库，可选项: highlightjs、prismjs，对应下面两组配置，高亮的配置说明具体见主题配置中的注释 首页 大标题：Slogan(打字机)，配置方法是1234index: slogan: enable: true text: 这是一条 Slogan 每篇文章 指定摘要：12# 在文章开头加上：excerpt: 这是摘要 隐藏文章：12# 在文章开头加上：hide: true 手动置顶：12# 在文章开头加上：sticky: 100 在首页的封面：12# 在文章开头加上：index_img: /img/example.jpg 文章头图：12# 在文章开头加上：banner_img: /img/post_banner.jpg 手动置顶：12# 在文章开头加上：sticky: 100 勾选框：1&#123;% cb 文字, 是否已勾选, 是否内联 %&#125; 这是一个勾选框 按钮：1&#123;% btn 链接, text, title %&#125; text 组图：1234567&#123;% gi total n1-n2-... %&#125; ![](url) ![](url) ![](url) ![](url) ![](url)&#123;% endgi %&#125; 特殊页面 About 页","categories":[],"tags":[{"name":"日志","slug":"日志","permalink":"http://petertan303.github.io/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"Hello World？Peter Tan！！","slug":"hello-world","date":"2023-01-16T13:39:17.273Z","updated":"2023-01-16T13:39:17.273Z","comments":true,"path":"2023/01/16/hello-world/","link":"","permalink":"http://petertan303.github.io/2023/01/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"我超，原","slug":"图片测试","date":"2023-01-16T12:19:36.000Z","updated":"2023-01-17T06:39:12.948Z","comments":true,"path":"2023/01/16/图片测试/","link":"","permalink":"http://petertan303.github.io/2023/01/16/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/","excerpt":"测试一下添加图片！！","text":"图片测试……？能看见吗？ 实际操作时，hexo 会给文件夹套进一串文件夹嵌套，比如说今天是2023年1月16日，套完前面会多一个2023&#x2F;01&#x2F;16&#x2F; 操作方法： 安装插件 hexo-asset-imageconfig 里的 post_asset_folder 改为 ture然后新生成的 md 就有了伴生图片文件夹，把图片放进去要使用的话，日期 + 文件夹 + 文件名例如：![图片](2023/01/16/图片测试/83-2.jpg &quot;&quot;) 有了插件 hexo-renderer-marked 的话，可以直接用图片名字，不需要日期和文件夹。 官方方法不使用中括号小括号的 md 语法，而是使用官方的 &#123;% asset_img example.jpg This is an example image %&#125; 现在使用了fluid主题放在source底下的img文件夹会被一并导出，使用img内图片：&#x2F;img&#x2F;asdasd.jpg 然后，事实证明，现在不能直接用图片名字了。 综上，要使用图片，就放在 source&#x2F;img&#x2F; 下，使用的时候引用 ![](img/图片 &quot;&quot;)，要想并排显示需要套一个 &#123;% gi 4 4 %&#125;` 和 `&#123;% endgi %&#125;。&#123;% asset_img example.jpg This is an example image %&#125; 似乎不能用了。 这是按钮NGA!!","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://petertan303.github.io/tags/test/"}]},{"title":"2023年1月16日","slug":"2023年1月16日","date":"2023-01-16T09:28:49.000Z","updated":"2023-04-23T15:21:12.637Z","comments":true,"path":"2023/01/16/2023年1月16日/","link":"","permalink":"http://petertan303.github.io/2023/01/16/2023%E5%B9%B41%E6%9C%8816%E6%97%A5/","excerpt":"","text":"hexo 使用： 12345678$ cd myblog//首先进入myblog文件夹$ hexo clear//然后清理之前残留的网页$ hexo g//然后生成网页$ hexo d //然后推送到GitHub上 markdown 本身使用 标题：井号，或 “ &#x3D;&#x3D;&#x3D; ” ， 或 “ — ” 段落：一行空白行，不应使用 tab 或者空格。 换行：段尾加两个空格，并换行。或者使用 标签。 粗体：两个星号或者两个下划线。 斜体：一个星号或一个下划线。 引用：在段落前添加 &gt; 符号。要引用多个段落，应给空白行也添加 &gt; 符号。 嵌套引用：额外加一个 &gt; 符号。 列表：数字和英文句号。 例如： 阿三大苏打 阿三大苏打 阿三大苏打 无序列表：段前加 - 或 * 或 + 。要保持缩进，需要添加四个空格，或一个 tab 。 代码块：四个空格或一个 tab 。 短单词表示为代码：用 ‘ 包裹。一段代码包含单引号：这段代码应用 &#96;&#96; 包裹。围栏代码块：加入 &#96;&#96;&#96; 包裹。 分割线： 三个星号、三个 - 、三个下划线，并在此之后添加空白行。 链接：中括号包含文本，小括号包含链接。所谓 title ， 即是鼠标悬浮在链接上的时候显示的东西，可以用双引号写在小括号结尾。hhh对于一般的链接，用尖括号框起来即可。https://nga.178.com 图片：![这是图片](/assets/img/philly-magic-garden.jpg &quot;Magic Gardens&quot;) 或者有链接的图片：[![沙漠中的岩石图片](/assets/img/shiprock.jpg &quot;Shi prock&quot;)](https://markdown.com.cn) 如何将 Windows 下文件导入 wsl wsl 中的 &#x2F;mnt 文件夹，对应 Windows 的计算机。例如，想要引用 D:\\桌面\\临时 里面的 103041518_p0.jpg，对应过来就是 &#x2F;mnt&#x2F;d&#x2F;桌面&#x2F;临时&#x2F;103041518_p0.jpg然后复制到 wsl：cp &#x2F;mnt&#x2F;d&#x2F;桌面&#x2F;临时&#x2F;103041518_p0.jpg ~&#x2F;myblog&#x2F;source&#x2F;_posts&#x2F;图片测试 看看效果？ 2023年4月23日更新： 其实可以直接通过Windows资源管理器访问linux文件夹。 Git 的使用 git commit &lt;文件&gt; （然后需要写提交日志） git pull git push","categories":[],"tags":[]},{"title":"my first blog test?","slug":"博客测试1","date":"2023-01-16T05:30:02.000Z","updated":"2023-01-16T09:51:09.351Z","comments":true,"path":"2023/01/16/博客测试1/","link":"","permalink":"http://petertan303.github.io/2023/01/16/%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%951/","excerpt":"","text":"Hello, world! 1//这是一个代码块 标题网址测试：nga","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://petertan303.github.io/tags/test/"}]}],"categories":[],"tags":[{"name":"日志","slug":"日志","permalink":"http://petertan303.github.io/tags/%E6%97%A5%E5%BF%97/"},{"name":"Test","slug":"Test","permalink":"http://petertan303.github.io/tags/Test/"},{"name":"笔记","slug":"笔记","permalink":"http://petertan303.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"未完待续","slug":"未完待续","permalink":"http://petertan303.github.io/tags/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/"},{"name":"test","slug":"test","permalink":"http://petertan303.github.io/tags/test/"}]}